name: Go Tests

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch: # Enables the web UI manual trigger
  # Note: ^^ will fail the "tag-release" step if the git tag already exists

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-go:
    name: Test Go
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      # This is a special matrix that tests against the listed version AND the
      # Go version from go.mod. See usage in the actions/setup-go step.
      matrix:
        include:
          - go-version: "stable"
          - go-version-file: "go.mod"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2
        with:
          submodules: recursive

      - name: Set up Go Version
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ matrix.go-version }} # overrides go-version-file when a value is present
          go-version-file: ${{ matrix.go-version-file }}

      - name: Get go dependencies
        run: go get -t ./...

      - name: Run Go tests
        env:
          CGO_ENABLED: "0"
        run: go test -bench . ./...

      - name: Run Go tests with race detector
        env:
          CGO_ENABLED: "1"
        run: go test -race ./...

      - name: Vet Go code
        run: go vet ./...

      - name: govulncheck
        uses: golang/govulncheck-action@v1.0.4
        with:
          go-version-input: "stable"
          repo-checkout: false

      - name: Verify repo is unchanged
        run: git diff --exit-code HEAD

  test-makefile:
    name: Test Makefile Integrity
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: "stable"

      - name: Get go dependencies
        run: go get -t ./...
      
      - name: Set up Wasmtime
        uses: bytecodealliance/actions/wasmtime/setup@v1.1.1
        with:
          version: v32.0.0

      - name: Run Makefile Integrity Tests
        run: make test-makefile-integrity

  # Test with TinyGo
  test-tinygo-wasm:
    name: Test WASM Go & TinyGo
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      # This is a special matrix that tests against the listed version AND the
      # Go version from go.mod. See usage in the actions/setup-go step.
      matrix:
        go-version:
          - big: "1.23"
            tiny: "0.36.0"
          - big: "1.24"
            tiny: "0.37.0"
        # FIXME: TinyGo needs to be manually bumped; it doesn't immediately
        # release support for new major Go versions something should ping when a
        # new version is available.
        include:
          - go-version:
              file: "go.mod"
              tiny: "0.37.0"

    env:
      GODEBUG: toolchaintrace=1
      GOTOOLCHAIN: local

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2
        with:
          submodules: recursive

      - name: Set up Go Version
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ matrix.go-version.big }} # overrides go-version-file when a value is present
          go-version-file: ${{ matrix.go-version.file }}

      - name: Add Go wasm exec to $PATH (for Go < 1.24 and Go >= 1.24)
        run: |
          echo "$(go env GOROOT)/misc/wasm" >> $GITHUB_PATH
          echo "$(go env GOROOT)/lib/wasm" >> $GITHUB_PATH

      - name: Check for wasmtime bridge
        run: which go_wasip1_wasm_exec

      - name: Get go dependencies
        run: go get -t ./...

      - name: Set up TinyGo
        uses: acifani/setup-tinygo@v2.0.1
        with:
          tinygo-version: "${{ matrix.go-version.tiny }}"
          binaryen-version: "123"

      - name: Check for binaryen
        run: wasm-opt --version

      - name: Set up Wasmtime
        uses: bytecodealliance/actions/wasmtime/setup@v1.1.1
        with:
          version: v32.0.0

      - name: Test with TinyGo
        # This only tests the apex package, not ./internal/build
        # due to TinyGo support for net.UDPConn and net.IPConn
        run: tinygo test -bench -target=wasip1 . ./

      - name: Test WASM with Go + wasmtime
        # https://go.dev/blog/wasi#running-go-tests-with-wasip1
        run: GOOS=wasip1 GOARCH=wasm go test ./...

      - name: Test WASM with TinyGo + wasmtime
        # This only tests the apex package, not ./internal/build
        # due to TinyGo support for net.UDPConn and net.IPConn
        run: tinygo test -target=wasip1 ./

      - name: Verify repo is unchanged
        run: git diff --exit-code HEAD

      - name: Notify if failure
        if: failure() # can't use secrets context here; shell command will exit if the secret is not set
        run: |
          test -z "${{ secrets.SLACK_WEBHOOK_URL_GH_ACTIONS }}" && exit 0
          curl -Ss -X POST -H 'Content-type: application/json' --data '{"text":"❌ ZoneDB TinyGo tests failed"}' ${{ secrets.SLACK_WEBHOOK_URL_GH_ACTIONS }}

  # Tag release
  tag-release:
    name: Tag Release
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: [test-go, test-tinygo-wasm]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # Retrieve all commit history, so `git rev-list --count` works correctly
          submodules: recursive

      - name: Tag release
        run: make tag-version

      - name: Notify if failure
        if: failure() # can't use secrets context here; shell command will exit if the secret is not set
        run: |
          curl -Ss -X POST -H 'Content-type: application/json' --data '{"text":"❌ ZoneDB tests failed"}' ${{ secrets.SLACK_WEBHOOK_URL_GH_ACTIONS }}

      # - name: Notify if success
      #   if: ${{ success() }}
      #   run: |
      #   curl -Ss -X POST -H 'Content-type: application/json' --data '{"text":"✅ ZoneDB tests passed"}' ${{ secrets.SLACK_WEBHOOK_URL_GH_ACTIONS }}
